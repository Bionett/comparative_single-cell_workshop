'''
================
Pipeline statistically models the cellular tissue composition along different
experimental conditions
================

Overview
========
This pipeline performs the following steps:

* Runs scCODA.

* Runs CNA.

Configuration
-------------
The pipeline requires a configured :file:`pipeline.yml` file. Default configuration files can be generated by executing: ::

   python <srcdir>/pipeline_difftissue_comp.py config


Input files
-----------
* cell metadata file (*.tsv.gz table) with column called barcode
* cell variable to test (string)
* model/co-variaties
* cell embedding (*.tsv.gz table) with column called barcode


Dependencies
------------
This pipeline requires:
* cgat-core: https://github.com/cgat-developers/cgat-core
* Python dependencies required in the python function 


Pipeline output
===============
The pipeline returns:
* scCODA
  * cell-cluster statistics file *.tsv.gz
* CNA
  *
  *

Code
====

'''

from ruffus import *
from ruffus.combinatorics import *
import sys
import os
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools
from pathlib import Path
import pandas as pd
import glob

# -------------------------- < parse parameters > --------------------------- #

# load options from the config file
PARAMS = P.get_parameters(
        ["%s/pipeline.yml" % os.path.splitext(__file__)[0],
        "../pipeline.yml",
        "pipeline.yml"])

# Set the location of the cellhub code directory
if "code_dir" not in PARAMS.keys():
    PARAMS["code_dir"] = Path(__file__).parents[1]
else:
    if PARAMS["code_dir"] != Path(__file__).parents[1]:
        raise ValueError("Could not set the location of "
                         "the pipeline code directory")
print(PARAMS)

# ----------------------- < pipeline configuration > ------------------------ #

# handle pipeline configuration
if len(sys.argv) > 1:
        if(sys.argv[1] == "config") and __name__ == "__main__":
                    sys.exit(P.main(sys.argv))
                    
# ############################################################################ #
# ################################# scCODA ################################### #
# ############################################################################ #

@follows(mkdir("diffcomp.dir"))
@files(PARAMS["cell_metadata"], "diffcomp.dir/sccoda.dir/sccoda_input.sentinel")
def getCellcounts(infile, outfile):
    ''' 
    Create cell cluster counts table for scCODA input. 
    '''
    
    outdir = os.path.dirname(outfile)
    if not os.path.exists(outdir):
        os.makedirs(outdir)
    
    cellmeta = PARAMS["cell_metadata"]
    clustervar = PARAMS["cell_cluster_var"]
    samplevar = PARAMS["sampleid_var"]
    conditionvar = PARAMS["sample_condition_var"]
    outcellcount = outfile.replace(".sentinel", ".tsv")
    
    log_file = outfile.replace(".sentinel", ".log")
    job_threads = PARAMS["cores"]

    if ("G" in PARAMS["memory"] or
     "M" in PARAMS["memory"] ):
        job_memory = PARAMS["memory"]

    statement = ''' Rscript %(code_dir)s/difftissue/R/prepare_sccoda_tables.R
                    --cellmeta=%(cellmeta)s
                    --cellvar=barcode_id
                    --curated_cellmeta=None
                    --cur_cellvar=None
                    --clustervariable=%(clustervar)s
                    --samplevariable=%(samplevar)s
                    --samplemetavars=%(conditionvar)s
                    --outfile=%(outcellcount)s
                    --numcores=%(job_threads)s
                    &> %(log_file)s
                '''
    P.run(statement)

    IOTools.touch_file(outfile)


@transform(getCellcounts,
        regex(r"diffcomp.dir/sccoda.dir/sccoda_input.sentinel"),
        r"diffcomp.dir/sccoda.dir/sccoda_out.sentinel")
def runscCODA(infile, outfile):
    
    cellcount = infile.replace(".sentinel", "_cell_count_mat.tsv.gz")
    samplemeta = infile.replace(".sentinel", "_sample_meta.tsv.gz")
    condvar = PARAMS["sample_condition_var"]
    condlevel = PARAMS["sample_cond_reflevel"]
    outstats = outfile.replace(".sentinel", ".tsv.gz")
    log_file = outfile.replace(".sentinel", ".log")
    job_threads = PARAMS["cores"]

    if ("G" in PARAMS["memory"] or
     "M" in PARAMS["memory"] ):
        job_memory = PARAMS["memory"]

    statement = ''' python %(code_dir)s/difftissue/python/run_sccoda.py
                    --cell_count_file=%(cellcount)s
                    --sample_meta=%(samplemeta)s
                    --conditionvar=%(condvar)s
                    --conditionvar_level=%(condlevel)s
                    --outfile=%(outstats)s
                    &> %(log_file)s
                '''
    P.run(statement)

    IOTools.touch_file(outfile)

@follows(mkdir("diffcomp.dir"))
@originate("diffcomp.dir/cna.dir/cna_out.sentinel")
def runCNA(outfile):
    
    adata = PARAMS["adata_file"]
    condvar = PARAMS["sample_condition_var"]
    covar = PARAMS["covariate"]
    outstats = outfile.replace(".sentinel", ".tsv.gz")
    log_file = outfile.replace(".sentinel", ".log")
    job_threads = PARAMS["cores"]

    if ("G" in PARAMS["memory"] or
     "M" in PARAMS["memory"] ):
        job_memory = PARAMS["memory"]
  
    statement = ''' python %(code_dir)s/difftissue/python/run_cna.py
                    --adata_file=%(adata)s
                    --conditionvar=%(condvar)s
                    --covariate=%(covar)s
                    --batch=sample_id
                    --outfile=%(outstats)s
                    &> %(log_file)s
                '''
    P.run(statement)
  
    IOTools.touch_file(outfile)

# ------------------------------------------------------------------------------
# Generic pipeline tasks

@follows(runscCODA, runCNA)
@files(None, "diffcomp.dir/plot.sentinel")
def plot(infile, outfile):
    '''Draw the pipeline flowchart'''

    pipeline_printout_graph("diffcomp.dir/pipeline_flowchart.svg",
                          "svg",
                          [full],
                          no_key_legend=True)

    pipeline_printout_graph("diffcomp.dir/pipeline_flowchart.png",
                          "png",
                          [full],
                          no_key_legend=True)

    IOTools.touch_file(outfile)


@follows(runscCODA, runCNA)
def full():
    '''
    Run the full pipeline.
    '''
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))

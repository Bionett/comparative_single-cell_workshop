'''
================
Pipeline investigates gene expression variation in a single-cell datasete. 
Prepares the pseudo-bulk matrices [gene, celltype-sample], ranks sample metadata
variables to inform gene-expression modeling.
================

Overview
========
This pipeline performs the following steps:

* pseudo-pulk matrices.

* PVCA.

Configuration
-------------
The pipeline requires a configured :file:`pipeline.yml` file. Default configuration files can be generated by executing: ::

   python <srcdir>/pipeline_genevar.py config


Input files
-----------
* *h5ad file with count layer.
* cell metadata *tsv.gz file.
* sample metadata *tsv.gz file.

Dependencies
------------
This pipeline requires:
* cgat-core: https://github.com/cgat-developers/cgat-core
* Python dependencies required in the python function 


Pipeline output
===============
The pipeline returns:
* Rank of sample metadata variables per cell-type *tsv.gz. Most variance-explanatory
variables are ranked first. 

Code
====

'''

from ruffus import *
from ruffus.combinatorics import *
import sys
import os
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools
from pathlib import Path
import pandas as pd
import glob

# -------------------------- < parse parameters > --------------------------- #

# load options from the config file
PARAMS = P.get_parameters(
        ["%s/pipeline.yml" % os.path.splitext(__file__)[0],
        "../pipeline.yml",
        "pipeline.yml"])

# Set the location of the cellhub code directory
if "code_dir" not in PARAMS.keys():
    PARAMS["code_dir"] = Path(__file__).parents[1]
else:
    if PARAMS["code_dir"] != Path(__file__).parents[1]:
        raise ValueError("Could not set the location of "
                         "the pipeline code directory")
print(PARAMS)

# ----------------------- < pipeline configuration > ------------------------ #

# handle pipeline configuration
if len(sys.argv) > 1:
        if(sys.argv[1] == "config") and __name__ == "__main__":
                    sys.exit(P.main(sys.argv))
                    
# ############################################################################ #
# ################################# pbulk ################################### #
# ############################################################################ #

@follows(mkdir("genevar.dir"))
@files(PARAMS["adata_file"], "genevar.dir/pbulk.dir/pbulk.sentinel")
def getpBulk(infile, outfile):
    ''' 
    Create a pseudo-bulk gene expression matrix based on two cell metadata variables.  
    '''
    
    outdir = os.path.dirname(outfile)
    if not os.path.exists(outdir):
        os.makedirs(outdir)
    
    cellmeta = PARAMS["cell_metadata"]
    clustervar = PARAMS["cell_cluster_var"]
    samplevar = PARAMS["sampleid_var"]
    outpbulk = outfile.replace(".sentinel", ".tsv.gz")
    
    log_file = outfile.replace(".sentinel", ".log")
    job_threads = PARAMS["cores"]

    if ("G" in PARAMS["memory"] or
     "M" in PARAMS["memory"] ):
        job_memory = PARAMS["memory"]

    statement = ''' python %(code_dir)s/diffgene/python/get_pbulk.py
                    --adata_file=%(infile)s
                    --cell_metadata=%(cellmeta)s
                    --cell_var=%(clustervar)s
                    --sample_var=%(samplevar)s
                    --outfile=%(outpbulk)s
                    &> %(log_file)s
                '''
                
    P.run(statement)

    IOTools.touch_file(outfile)

@transform(getpBulk,
        regex(r"genevar.dir/pbulk.dir/pbulk.sentinel"),
        r"genevar.dir/pvca.dir/pvca.sentinel")
def runPVCA(infile, outfile):
    
    outdir = os.path.dirname(outfile)
    if not os.path.exists(outdir):
        os.makedirs(outdir)
    
    inpbulk = infile.replace(".sentinel", ".tsv.gz")
    cellmeta = PARAMS["cell_metadata"]
    clustervar = PARAMS["cell_cluster_var"]
    samplevar = PARAMS["sampleid_var"]
    samplevars = PARAMS["sample_var_2model"]
    samplemeta = PARAMS["sample_meta"]
    mincount = PARAMS["min_gene_count"]
    outrank = outfile.replace(".sentinel", ".tsv")
    
    log_file = outfile.replace(".sentinel", ".log")
    job_threads = PARAMS["cores"]

    if ("G" in PARAMS["memory"] or
     "M" in PARAMS["memory"] ):
        job_memory = PARAMS["memory"]

    statement = ''' Rscript %(code_dir)s/diffgene/R/run_pvca.R
                    --pbulk=%(inpbulk)s
                    --cellmeta=%(cellmeta)s
                    --cell_var=%(clustervar)s
                    --sample_var=%(samplevar)s
                    --cellvars=%(samplevars)s
                    --sample_meta=%(sample_meta)s
                    --mingenecount=%(mincount)s
                    --outfile=%(outrank)s
                    --log_filename=%(log_file)s
                    --numcores=%(job_threads)s
                '''
    P.run(statement)

    IOTools.touch_file(outfile)
    
# ------------------------------------------------------------------------------
# Generic pipeline tasks

@follows(getpBulk, runPVCA)
@files(None, "genevar.dir/plot.sentinel")
def plot(infile, outfile):
    '''Draw the pipeline flowchart'''

    pipeline_printout_graph("genevar.dir/pipeline_flowchart.svg",
                          "svg",
                          [full],
                          no_key_legend=True)

    pipeline_printout_graph("genevar.dir/pipeline_flowchart.png",
                          "png",
                          [full],
                          no_key_legend=True)

    IOTools.touch_file(outfile)


@follows(getpBulk, runPVCA)
def full():
    '''
    Run the full pipeline.
    '''
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
